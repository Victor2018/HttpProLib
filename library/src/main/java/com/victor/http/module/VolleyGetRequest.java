package com.victor.http.module;import android.util.Log;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONException;import com.android.volley.AuthFailureError;import com.android.volley.NetworkResponse;import com.android.volley.ParseError;import com.android.volley.Request;import com.android.volley.Response;import com.android.volley.Response.ErrorListener;import com.android.volley.Response.Listener;import com.android.volley.toolbox.HttpHeaderParser;import java.io.UnsupportedEncodingException;import java.util.HashMap;import java.util.Map;/** * @param <T> * Created by victor on 2017/2/8. */public class VolleyGetRequest<T> extends Request<T> {    private String TAG = "VolleyGetRequest";    private Class<T> mClass;    private String requestUrl;    private HashMap<String,String> mHeaders;    private Listener<T> mListener;    public VolleyGetRequest(int method, String url, Listener<T> listener,                            ErrorListener errorListener) {        super(method, url, errorListener);//        setRetryPolicy(new DefaultRetryPolicy(30000, 0, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));    }    public VolleyGetRequest(String url, HashMap<String,String> headers, String parm, Class<T> clazz, Listener<T> listener, ErrorListener errorListener) {        this(Request.Method.GET, url + parm,listener, errorListener);        mClass = clazz;        requestUrl = url;        mHeaders = headers == null ? new HashMap<String, String>() : headers;        mListener = listener;    }    @Override    public Map<String, String> getHeaders() throws AuthFailureError {        Log.e(TAG,"mHeaders = " + mHeaders);        if (mHeaders != null) {            mHeaders.put("User-agent", HttpRequest.userAgent);        }        Log.e(TAG,"mHeaders = " + mHeaders);        return mHeaders == null ? super.getHeaders() : mHeaders;    }    @Override    protected Response<T> parseNetworkResponse(NetworkResponse response) {        try {            Log.e(TAG,"HttpHeaderParser.parseCharset(response.headers) = " + HttpHeaderParser.parseCharset(response.headers));//            String responseData = new String(response.data, HttpHeaderParser.parseCharset(response.headers));            String responseData = new String(response.data, "utf-8");            Log.e(TAG,"response url = " +  requestUrl);            Log.e(TAG,"responseData = " + responseData);            if (mClass.toString().contains("String")) {                return (Response<T>) Response.success(responseData,                        HttpHeaderParser.parseCacheHeaders(response));            }            return (Response<T>) Response.success(parseObject(responseData,mClass),                    HttpHeaderParser.parseCacheHeaders(response));        } catch (UnsupportedEncodingException e) {            return Response.error(new ParseError(e));        }    }    @Override    protected void deliverResponse(T response) {        mListener.onResponse(response);    }    @Override    public String getBodyContentType() {        return "application/x-www-form-urlencoded; charset=" + getParamsEncoding();    }    public static <T> T parseObject(String text, Class<T> clazz) {        try {            T result = JSON.parseObject(text, clazz);            return result;        } catch (JSONException e) {            e.printStackTrace();        }        return null;    }}